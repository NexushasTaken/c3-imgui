module imgui;

extern fn ZString table_get_column_name(int column_n = -1) @extern("igTableGetColumnName");

extern fn void load_ini_settings_from_memory(ZString ini_data, usz ini_size = 0) @extern("igLoadIniSettingsFromMemory");

extern fn double get_time() @extern("igGetTime");

extern fn void set_tab_item_closed(ZString tab_or_docked_window_label) @extern("igSetTabItemClosed");

extern fn void end_tab_bar() @extern("igEndTabBar");

extern fn void end_frame() @extern("igEndFrame");

extern fn bool shortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags = 0) @extern("igShortcut");

extern fn float get_text_line_height() @extern("igGetTextLineHeight");

extern fn bool is_mouse_double_clicked(ImGuiMouseButton button) @extern("igIsMouseDoubleClicked");

extern fn void pop_item_width() @extern("igPopItemWidth");

extern fn void end_tab_item() @extern("igEndTabItem");

extern fn bool begin_drag_drop_source(ImGuiDragDropFlags flags = 0) @extern("igBeginDragDropSource");

extern fn void show_metrics_window(bool* p_open = null) @extern("igShowMetricsWindow");

extern fn void set_allocator_functions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void* user_data = null) @extern("igSetAllocatorFunctions");

extern fn bool input_float3(ZString label, float[/*3*/] v, ZString format = "%.3f", ImGuiInputTextFlags flags = 0) @extern("igInputFloat3");

extern fn bool input_float2(ZString label, float[/*2*/] v, ZString format = "%.3f", ImGuiInputTextFlags flags = 0) @extern("igInputFloat2");

extern fn bool input_float4(ZString label, float[/*4*/] v, ZString format = "%.3f", ImGuiInputTextFlags flags = 0) @extern("igInputFloat4");

extern fn ZString get_key_name(ImGuiKey key) @extern("igGetKeyName");

extern fn ImGuiMultiSelectIO* begin_multi_select(ImGuiMultiSelectFlags flags, int selection_size = -1, int items_count = -1) @extern("igBeginMultiSelect");

extern fn bool tab_item_button(ZString label, ImGuiTabItemFlags flags = 0) @extern("igTabItemButton");

extern fn bool is_any_item_focused() @extern("igIsAnyItemFocused");

extern fn bool slider_int3(ZString label, int[/*3*/] v, int v_min, int v_max, ZString format = "%d", ImGuiSliderFlags flags = 0) @extern("igSliderInt3");

extern fn bool slider_int2(ZString label, int[/*2*/] v, int v_min, int v_max, ZString format = "%d", ImGuiSliderFlags flags = 0) @extern("igSliderInt2");

extern fn void end_list_box() @extern("igEndListBox");

extern fn ImFont* get_font() @extern("igGetFont");

extern fn bool begin_table(ZString str_id, int columns, ImGuiTableFlags flags = 0, ImVec2 outer_size = {0.0f, 0.0f}, float inner_width = 0.0f) @extern("igBeginTable");

extern fn bool slider_int4(ZString label, int[/*4*/] v, int v_min, int v_max, ZString format = "%d", ImGuiSliderFlags flags = 0) @extern("igSliderInt4");

extern fn void set_nav_cursor_visible(bool visible) @extern("igSetNavCursorVisible");

extern fn float get_text_line_height_with_spacing() @extern("igGetTextLineHeightWithSpacing");

extern fn void end() @extern("igEnd");

extern fn bool is_rect_visible_nil(ImVec2 size) @extern("igIsRectVisible_Nil");

extern fn bool is_rect_visible_vec2(ImVec2 rect_min, ImVec2 rect_max) @extern("igIsRectVisible_Vec2");

extern fn bool is_item_toggled_selection() @extern("igIsItemToggledSelection");

extern fn bool input_text_multiline(ZString label, char* buf, usz buf_size, ImVec2 size = {0, 0}, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = null, void* user_data = null) @extern("igInputTextMultiline");

extern fn void end_menu() @extern("igEndMenu");

extern fn ImGuiMultiSelectIO* end_multi_select() @extern("igEndMultiSelect");

extern fn bool tree_node_ex_str(ZString label, ImGuiTreeNodeFlags flags = 0) @extern("igTreeNodeEx_Str");

extern fn bool tree_node_ex_str_str(ZString str_id, ImGuiTreeNodeFlags flags, ZString fmt, ...) @extern("igTreeNodeEx_StrStr");

extern fn bool tree_node_ex_ptr(void* ptr_id, ImGuiTreeNodeFlags flags, ZString fmt, ...) @extern("igTreeNodeEx_Ptr");

extern fn void table_setup_column(ZString label, ImGuiTableColumnFlags flags = 0, float init_width_or_weight = 0.0f, ImGuiID user_id = 0) @extern("igTableSetupColumn");

extern fn void set_color_edit_options(ImGuiColorEditFlags flags) @extern("igSetColorEditOptions");

extern fn bool show_style_selector(ZString label) @extern("igShowStyleSelector");

extern fn void spacing() @extern("igSpacing");

extern fn void push_item_flag(ImGuiItemFlags option, bool enabled) @extern("igPushItemFlag");

extern fn bool begin(ZString name, bool* p_open = null, ImGuiWindowFlags flags = 0) @extern("igBegin");

extern fn void color_convert_hs_vto_rgb(float h, float s, float v, float* out_r, float* out_g, float* out_b) @extern("igColorConvertHSVtoRGB");

extern fn bool is_item_toggled_open() @extern("igIsItemToggledOpen");

extern fn bool begin_drag_drop_target() @extern("igBeginDragDropTarget");

extern fn bool drag_float(ZString label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, ZString format = "%.3f", ImGuiSliderFlags flags = 0) @extern("igDragFloat");

extern fn void show_about_window(bool* p_open = null) @extern("igShowAboutWindow");

extern fn void push_id_str(ZString str_id) @extern("igPushID_Str");

extern fn void push_id_str_str(ZString str_id_begin, ZString str_id_end) @extern("igPushID_StrStr");

extern fn void push_id_ptr(void* ptr_id) @extern("igPushID_Ptr");

extern fn void push_id_int(int int_id) @extern("igPushID_Int");

extern fn void style_colors_light(ImGuiStyle* dst = null) @extern("igStyleColorsLight");

extern fn bool is_any_item_hovered() @extern("igIsAnyItemHovered");

extern fn int table_get_column_index() @extern("igTableGetColumnIndex");

extern fn ImGuiTableSortSpecs* table_get_sort_specs() @extern("igTableGetSortSpecs");

extern fn void show_font_selector(ZString label) @extern("igShowFontSelector");

extern fn bool is_mouse_down(ImGuiMouseButton button) @extern("igIsMouseDown");

extern fn bool is_item_focused() @extern("igIsItemFocused");

extern fn int get_mouse_clicked_count(ImGuiMouseButton button) @extern("igGetMouseClickedCount");

extern fn bool begin_menu_bar() @extern("igBeginMenuBar");

extern fn void table_set_bg_color(ImGuiTableBgTarget target, ImU32 color, int column_n = -1) @extern("igTableSetBgColor");

extern fn void end_table() @extern("igEndTable");

extern fn void set_next_frame_want_capture_mouse(bool want_capture_mouse) @extern("igSetNextFrameWantCaptureMouse");

extern fn void set_next_frame_want_capture_keyboard(bool want_capture_keyboard) @extern("igSetNextFrameWantCaptureKeyboard");

extern fn void set_window_pos_vec2(ImVec2 pos, ImGuiCond cond = 0) @extern("igSetWindowPos_Vec2");

extern fn void set_window_pos_str(ZString name, ImVec2 pos, ImGuiCond cond = 0) @extern("igSetWindowPos_Str");

extern fn void show_id_stack_tool_window(bool* p_open = null) @extern("igShowIDStackToolWindow");

extern fn void table_setup_scroll_freeze(int cols, int rows) @extern("igTableSetupScrollFreeze");

extern fn void plot_lines_float_ptr(ZString label, float* values, int values_count, int values_offset = 0, ZString overlay_text = null, float scale_min = float.max, float scale_max = float.max, ImVec2 graph_size = {0, 0}, int stride = float.sizeof) @extern("igPlotLines_FloatPtr");

extern fn void plot_lines_fn_float_ptr(ZString label, PlotLines_ValuesGetter_Func values_getter, void* data, int values_count, int values_offset = 0, ZString overlay_text = null, float scale_min = float.max, float scale_max = float.max, ImVec2 graph_size = {0, 0}) @extern("igPlotLines_FnFloatPtr");
def PlotLines_ValuesGetter_Func = fn float(void* data, int idx);

extern fn void set_next_window_size_constraints(ImVec2 size_min, ImVec2 size_max, ImGuiSizeCallback custom_callback = null, void* custom_callback_data = null) @extern("igSetNextWindowSizeConstraints");

extern fn void bullet_text(ZString fmt, ...) @extern("igBulletText");

extern fn bool is_key_chord_pressed(ImGuiKeyChord key_chord) @extern("igIsKeyChordPressed");

extern fn ZString save_ini_settings_to_memory(usz* out_ini_size = null) @extern("igSaveIniSettingsToMemory");

extern fn bool is_key_released(ImGuiKey key) @extern("igIsKeyReleased");

extern fn void push_item_width(float item_width) @extern("igPushItemWidth");

extern fn void show_demo_window(bool* p_open = null) @extern("igShowDemoWindow");

extern fn ImVec4* get_style_color_vec4(ImGuiCol idx) @extern("igGetStyleColorVec4");

extern fn bool list_box_str_arr(ZString label, int* current_item, ZString[] items, int items_count, int height_in_items = -1) @extern("igListBox_Str_arr");

extern fn bool list_box_fn_str_ptr(ZString label, int* current_item, ListBox_Getter_Func getter, void* user_data, int items_count, int height_in_items = -1) @extern("igListBox_FnStrPtr");
def ListBox_Getter_Func = fn ZString(void* user_data, int idx);

extern fn bool invisible_button(ZString str_id, ImVec2 size, ImGuiButtonFlags flags = 0) @extern("igInvisibleButton");

extern fn bool arrow_button(ZString str_id, ImGuiDir dir) @extern("igArrowButton");

extern fn ImDrawList* get_window_draw_list() @extern("igGetWindowDrawList");

extern fn void set_next_item_storage_id(ImGuiID storage_id) @extern("igSetNextItemStorageID");

extern fn bool is_mouse_pos_valid(ImVec2* mouse_pos = null) @extern("igIsMousePosValid");

extern fn void text_link_open_url(ZString label, ZString url = null) @extern("igTextLinkOpenURL");

extern fn void set_column_offset(int column_index, float offset_x) @extern("igSetColumnOffset");

extern fn void dummy(ImVec2 size) @extern("igDummy");

extern fn bool is_item_deactivated() @extern("igIsItemDeactivated");

extern fn bool input_text(ZString label, char* buf, usz buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = null, void* user_data = null) @extern("igInputText");

extern fn void begin_disabled(bool disabled = true) @extern("igBeginDisabled");

extern fn void separator() @extern("igSeparator");

extern fn ImGuiPayload* accept_drag_drop_payload(ZString type, ImGuiDragDropFlags flags = 0) @extern("igAcceptDragDropPayload");

extern fn ImU32 get_color_u32_col(ImGuiCol idx, float alpha_mul = 1.0f) @extern("igGetColorU32_Col");

extern fn ImU32 get_color_u32_vec4(ImVec4 col) @extern("igGetColorU32_Vec4");

extern fn ImU32 get_color_u32_u32(ImU32 col, float alpha_mul = 1.0f) @extern("igGetColorU32_U32");

extern fn bool checkbox_flags_int_ptr(ZString label, int* flags, int flags_value) @extern("igCheckboxFlags_IntPtr");

extern fn bool checkbox_flags_uint_ptr(ZString label, uint* flags, uint flags_value) @extern("igCheckboxFlags_UintPtr");

extern fn void pop_font() @extern("igPopFont");

extern fn bool slider_float4(ZString label, float[/*4*/] v, float v_min, float v_max, ZString format = "%.3f", ImGuiSliderFlags flags = 0) @extern("igSliderFloat4");

extern fn float get_tree_node_to_label_spacing() @extern("igGetTreeNodeToLabelSpacing");

extern fn bool tree_node_str(ZString label) @extern("igTreeNode_Str");

extern fn bool tree_node_str_str(ZString str_id, ZString fmt, ...) @extern("igTreeNode_StrStr");

extern fn bool tree_node_ptr(void* ptr_id, ZString fmt, ...) @extern("igTreeNode_Ptr");

extern fn bool table_set_column_index(int column_n) @extern("igTableSetColumnIndex");

extern fn void set_scroll_y(float scroll_y) @extern("igSetScrollY");

extern fn ImGuiIO* get_io() @extern("igGetIO");

extern fn void set_scroll_x(float scroll_x) @extern("igSetScrollX");

extern fn int table_get_hovered_column() @extern("igTableGetHoveredColumn");

extern fn bool slider_float3(ZString label, float[/*3*/] v, float v_min, float v_max, ZString format = "%.3f", ImGuiSliderFlags flags = 0) @extern("igSliderFloat3");

extern fn void set_item_key_owner(ImGuiKey key) @extern("igSetItemKeyOwner");

extern fn bool slider_float2(ZString label, float[/*2*/] v, float v_min, float v_max, ZString format = "%.3f", ImGuiSliderFlags flags = 0) @extern("igSliderFloat2");

extern fn bool is_window_focused(ImGuiFocusedFlags flags = 0) @extern("igIsWindowFocused");

extern fn void set_next_item_allow_overlap() @extern("igSetNextItemAllowOverlap");

extern fn bool image_button(ZString str_id, ImTextureID user_texture_id, ImVec2 image_size, ImVec2 uv0 = {0, 0}, ImVec2 uv1 = {1, 1}, ImVec4 bg_col = {0, 0, 0, 0}, ImVec4 tint_col = {1, 1, 1, 1}) @extern("igImageButton");

extern fn ImGuiID get_id_str(ZString str_id) @extern("igGetID_Str");

extern fn ImGuiID get_id_str_str(ZString str_id_begin, ZString str_id_end) @extern("igGetID_StrStr");

extern fn ImGuiID get_id_ptr(void* ptr_id) @extern("igGetID_Ptr");

extern fn ImGuiID get_id_int(int int_id) @extern("igGetID_Int");

extern fn float get_scroll_y() @extern("igGetScrollY");

extern fn float get_scroll_x() @extern("igGetScrollX");

extern fn bool color_picker4(ZString label, float[/*4*/] col, ImGuiColorEditFlags flags = 0, float* ref_col = null) @extern("igColorPicker4");

extern fn bool is_item_deactivated_after_edit() @extern("igIsItemDeactivatedAfterEdit");

extern fn bool color_picker3(ZString label, float[/*3*/] col, ImGuiColorEditFlags flags = 0) @extern("igColorPicker3");

extern fn bool drag_float_range2(ZString label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, ZString format = "%.3f", ZString format_max = null, ImGuiSliderFlags flags = 0) @extern("igDragFloatRange2");

extern fn bool drag_float3(ZString label, float[/*3*/] v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, ZString format = "%.3f", ImGuiSliderFlags flags = 0) @extern("igDragFloat3");

extern fn bool drag_float2(ZString label, float[/*2*/] v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, ZString format = "%.3f", ImGuiSliderFlags flags = 0) @extern("igDragFloat2");

extern fn bool drag_float4(ZString label, float[/*4*/] v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, ZString format = "%.3f", ImGuiSliderFlags flags = 0) @extern("igDragFloat4");

extern fn ZString get_version() @extern("igGetVersion");

extern fn bool input_int4(ZString label, int[/*4*/] v, ImGuiInputTextFlags flags = 0) @extern("igInputInt4");

extern fn bool input_int3(ZString label, int[/*3*/] v, ImGuiInputTextFlags flags = 0) @extern("igInputInt3");

extern fn bool input_int2(ZString label, int[/*2*/] v, ImGuiInputTextFlags flags = 0) @extern("igInputInt2");

extern fn bool begin_combo(ZString label, ZString preview_value, ImGuiComboFlags flags = 0) @extern("igBeginCombo");

extern fn bool begin_popup(ZString str_id, ImGuiWindowFlags flags = 0) @extern("igBeginPopup");

extern fn void open_popup_on_item_click(ZString str_id = null, ImGuiPopupFlags popup_flags = 1) @extern("igOpenPopupOnItemClick");

extern fn bool is_mouse_clicked(ImGuiMouseButton button, bool repeat = false) @extern("igIsMouseClicked");

extern fn void set_cursor_pos_x(float local_x) @extern("igSetCursorPosX");

extern fn void set_cursor_pos_y(float local_y) @extern("igSetCursorPosY");

extern fn void log_text(ZString fmt, ...) @extern("igLogText");

extern fn void push_style_var_float(ImGuiStyleVar idx, float val) @extern("igPushStyleVar_Float");

extern fn void push_style_var_vec2(ImGuiStyleVar idx, ImVec2 val) @extern("igPushStyleVar_Vec2");

extern fn ImDrawData* get_draw_data() @extern("igGetDrawData");

extern fn bool is_key_down(ImGuiKey key) @extern("igIsKeyDown");

extern fn void begin_group() @extern("igBeginGroup");

extern fn void table_header(ZString label) @extern("igTableHeader");

extern fn void log_buttons() @extern("igLogButtons");

extern fn void log_to_file(int auto_open_depth = -1, ZString filename = null) @extern("igLogToFile");

extern fn void set_next_window_size(ImVec2 size, ImGuiCond cond = 0) @extern("igSetNextWindowSize");

extern fn void set_next_window_pos(ImVec2 pos, ImGuiCond cond = 0, ImVec2 pivot = {0, 0}) @extern("igSetNextWindowPos");

extern fn void tree_push_str(ZString str_id) @extern("igTreePush_Str");

extern fn void tree_push_ptr(void* ptr_id) @extern("igTreePush_Ptr");

extern fn bool slider_float(ZString label, float* v, float v_min, float v_max, ZString format = "%.3f", ImGuiSliderFlags flags = 0) @extern("igSliderFloat");

extern fn int get_columns_count() @extern("igGetColumnsCount");

extern fn void text_unformatted(ZString text, ZString text_end = null) @extern("igTextUnformatted");

extern fn void set_mouse_cursor(ImGuiMouseCursor cursor_type) @extern("igSetMouseCursor");

extern fn void* im_gui_free_type_get_builder_for_free_type() @extern("ImGuiFreeType_GetBuilderForFreeType");

extern fn bool checkbox(ZString label, bool* v) @extern("igCheckbox");

extern fn void value_bool(ZString prefix, bool b) @extern("igValue_Bool");

extern fn void value_int(ZString prefix, int v) @extern("igValue_Int");

extern fn void value_uint(ZString prefix, uint v) @extern("igValue_Uint");

extern fn void value_float(ZString prefix, float v, ZString float_format = null) @extern("igValue_Float");

extern fn bool is_window_appearing() @extern("igIsWindowAppearing");

extern fn bool is_mouse_dragging(ImGuiMouseButton button, float lock_threshold = -1.0f) @extern("igIsMouseDragging");

extern fn bool drag_scalar(ZString label, ImGuiDataType data_type, void* p_data, float v_speed = 1.0f, void* p_min = null, void* p_max = null, ZString format = null, ImGuiSliderFlags flags = 0) @extern("igDragScalar");

extern fn void set_window_focus_nil() @extern("igSetWindowFocus_Nil");

extern fn void set_window_focus_str(ZString name) @extern("igSetWindowFocus_Str");

extern fn void style_colors_classic(ImGuiStyle* dst = null) @extern("igStyleColorsClassic");

extern fn ImDrawList* get_foreground_draw_list() @extern("igGetForegroundDrawList");

extern fn void debug_text_encoding(ZString text) @extern("igDebugTextEncoding");

extern fn void set_state_storage(ImGuiStorage* storage) @extern("igSetStateStorage");

extern fn void text_colored(ImVec4 col, ZString fmt, ...) @extern("igTextColored");

extern fn bool begin_item_tooltip() @extern("igBeginItemTooltip");

extern fn bool drag_int_range2(ZString label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, ZString format = "%d", ZString format_max = null, ImGuiSliderFlags flags = 0) @extern("igDragIntRange2");

extern fn void table_angled_headers_row() @extern("igTableAngledHeadersRow");

extern fn void push_text_wrap_pos(float wrap_local_pos_x = 0.0f) @extern("igPushTextWrapPos");

extern fn void set_cursor_pos(ImVec2 local_pos) @extern("igSetCursorPos");

extern fn float get_scroll_max_x() @extern("igGetScrollMaxX");

extern fn float get_cursor_pos_x() @extern("igGetCursorPosX");

extern fn float get_scroll_max_y() @extern("igGetScrollMaxY");

extern fn float get_cursor_pos_y() @extern("igGetCursorPosY");

extern fn void open_popup_str(ZString str_id, ImGuiPopupFlags popup_flags = 0) @extern("igOpenPopup_Str");

extern fn void open_popup_id(ImGuiID id, ImGuiPopupFlags popup_flags = 0) @extern("igOpenPopup_ID");

extern fn void* get_draw_list_shared_data() @extern("igGetDrawListSharedData");

extern fn ImGuiViewport* get_main_viewport() @extern("igGetMainViewport");

extern fn void set_scroll_from_pos_x(float local_x, float center_x_ratio = 0.5f) @extern("igSetScrollFromPosX");

extern fn void set_scroll_from_pos_y(float local_y, float center_y_ratio = 0.5f) @extern("igSetScrollFromPosY");

extern fn void end_disabled() @extern("igEndDisabled");

extern fn bool input_int(ZString label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0) @extern("igInputInt");

extern fn void* get_current_context() @extern("igGetCurrentContext");

extern fn bool button(ZString label, ImVec2 size = {0, 0}) @extern("igButton");

extern fn float get_frame_height() @extern("igGetFrameHeight");

extern fn void end_main_menu_bar() @extern("igEndMainMenuBar");

extern fn ImGuiID get_item_id() @extern("igGetItemID");

extern fn bool slider_scalar_n(ZString label, ImGuiDataType data_type, void* p_data, int components, void* p_min, void* p_max, ZString format = null, ImGuiSliderFlags flags = 0) @extern("igSliderScalarN");

extern fn void unindent(float indent_w = 0.0f) @extern("igUnindent");

extern fn bool is_popup_open(ZString str_id, ImGuiPopupFlags flags = 0) @extern("igIsPopupOpen");

extern fn void set_window_size_vec2(ImVec2 size, ImGuiCond cond = 0) @extern("igSetWindowSize_Vec2");

extern fn void set_window_size_str(ZString name, ImVec2 size, ImGuiCond cond = 0) @extern("igSetWindowSize_Str");

extern fn bool radio_button_bool(ZString label, bool active) @extern("igRadioButton_Bool");

extern fn bool radio_button_int_ptr(ZString label, int* v, int v_button) @extern("igRadioButton_IntPtr");

extern fn bool is_item_hovered(ImGuiHoveredFlags flags = 0) @extern("igIsItemHovered");

extern fn int get_key_pressed_amount(ImGuiKey key, float repeat_delay, float rate) @extern("igGetKeyPressedAmount");

extern fn float get_window_width() @extern("igGetWindowWidth");

extern fn void end_combo() @extern("igEndCombo");

extern fn void set_scroll_here_y(float center_y_ratio = 0.5f) @extern("igSetScrollHereY");

extern fn void set_scroll_here_x(float center_x_ratio = 0.5f) @extern("igSetScrollHereX");

extern fn bool slider_scalar(ZString label, ImGuiDataType data_type, void* p_data, void* p_min, void* p_max, ZString format = null, ImGuiSliderFlags flags = 0) @extern("igSliderScalar");

extern fn void set_next_window_collapsed(bool collapsed, ImGuiCond cond = 0) @extern("igSetNextWindowCollapsed");

extern fn bool input_double(ZString label, double* v, double step = 0.0, double step_fast = 0.0, ZString format = "%.6f", ImGuiInputTextFlags flags = 0) @extern("igInputDouble");

extern fn bool is_any_mouse_down() @extern("igIsAnyMouseDown");

extern fn bool begin_tab_bar(ZString str_id, ImGuiTabBarFlags flags = 0) @extern("igBeginTabBar");

extern fn ImGuiStyle* get_style() @extern("igGetStyle");

extern fn void load_ini_settings_from_disk(ZString ini_filename) @extern("igLoadIniSettingsFromDisk");

extern fn bool drag_scalar_n(ZString label, ImGuiDataType data_type, void* p_data, int components, float v_speed = 1.0f, void* p_min = null, void* p_max = null, ZString format = null, ImGuiSliderFlags flags = 0) @extern("igDragScalarN");

extern fn bool drag_int4(ZString label, int[/*4*/] v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, ZString format = "%d", ImGuiSliderFlags flags = 0) @extern("igDragInt4");

extern fn bool drag_int3(ZString label, int[/*3*/] v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, ZString format = "%d", ImGuiSliderFlags flags = 0) @extern("igDragInt3");

extern fn bool drag_int2(ZString label, int[/*2*/] v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, ZString format = "%d", ImGuiSliderFlags flags = 0) @extern("igDragInt2");

extern fn void show_debug_log_window(bool* p_open = null) @extern("igShowDebugLogWindow");

extern fn ImGuiStorage* get_state_storage() @extern("igGetStateStorage");

extern fn bool is_key_pressed(ImGuiKey key, bool repeat = true) @extern("igIsKeyPressed");

extern fn void end_menu_bar() @extern("igEndMenuBar");

extern fn bool is_item_active() @extern("igIsItemActive");

extern fn float get_column_width(int column_index = -1) @extern("igGetColumnWidth");

extern fn bool begin_main_menu_bar() @extern("igBeginMainMenuBar");

extern fn float get_frame_height_with_spacing() @extern("igGetFrameHeightWithSpacing");

extern fn float get_font_size() @extern("igGetFontSize");

extern fn void text_wrapped(ZString fmt, ...) @extern("igTextWrapped");

extern fn bool color_edit4(ZString label, float[/*4*/] col, ImGuiColorEditFlags flags = 0) @extern("igColorEdit4");

extern fn bool color_edit3(ZString label, float[/*3*/] col, ImGuiColorEditFlags flags = 0) @extern("igColorEdit3");

extern fn ImDrawList* get_background_draw_list() @extern("igGetBackgroundDrawList");

extern fn bool begin_popup_context_window(ZString str_id = null, ImGuiPopupFlags popup_flags = 1) @extern("igBeginPopupContextWindow");

extern fn bool input_text_with_hint(ZString label, ZString hint, char* buf, usz buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = null, void* user_data = null) @extern("igInputTextWithHint");

extern fn void* mem_alloc(usz size) @extern("igMemAlloc");

extern fn bool begin_popup_context_item(ZString str_id = null, ImGuiPopupFlags popup_flags = 1) @extern("igBeginPopupContextItem");

extern fn bool selectable_bool(ZString label, bool selected = false, ImGuiSelectableFlags flags = 0, ImVec2 size = {0, 0}) @extern("igSelectable_Bool");

extern fn bool selectable_bool_ptr(ZString label, bool* p_selected, ImGuiSelectableFlags flags = 0, ImVec2 size = {0, 0}) @extern("igSelectable_BoolPtr");

extern fn bool input_scalar_n(ZString label, ImGuiDataType data_type, void* p_data, int components, void* p_step = null, void* p_step_fast = null, ZString format = null, ImGuiInputTextFlags flags = 0) @extern("igInputScalarN");

extern fn bool begin_list_box(ZString label, ImVec2 size = {0, 0}) @extern("igBeginListBox");

extern fn void push_style_var_y(ImGuiStyleVar idx, float val_y) @extern("igPushStyleVarY");

extern fn void push_style_var_x(ImGuiStyleVar idx, float val_x) @extern("igPushStyleVarX");

extern fn void set_next_item_selection_user_data(ImGuiSelectionUserData selection_user_data) @extern("igSetNextItemSelectionUserData");

extern fn ZString get_style_color_name(ImGuiCol idx) @extern("igGetStyleColorName");

extern fn bool begin_tab_item(ZString label, bool* p_open = null, ImGuiTabItemFlags flags = 0) @extern("igBeginTabItem");

extern fn void mem_free(void* ptr) @extern("igMemFree");

extern fn void set_tooltip(ZString fmt, ...) @extern("igSetTooltip");

extern fn void set_item_tooltip(ZString fmt, ...) @extern("igSetItemTooltip");

extern fn float get_column_offset(int column_index = -1) @extern("igGetColumnOffset");

extern fn void set_window_collapsed_bool(bool collapsed, ImGuiCond cond = 0) @extern("igSetWindowCollapsed_Bool");

extern fn void set_window_collapsed_str(ZString name, bool collapsed, ImGuiCond cond = 0) @extern("igSetWindowCollapsed_Str");

extern fn void set_next_window_focus() @extern("igSetNextWindowFocus");

extern fn void debug_start_item_picker() @extern("igDebugStartItemPicker");

extern fn void destroy_context(void* ctx = null) @extern("igDestroyContext");

extern fn void show_style_editor(ImGuiStyle* ref = null) @extern("igShowStyleEditor");

extern fn void end_group() @extern("igEndGroup");

extern fn bool is_any_item_active() @extern("igIsAnyItemActive");

extern fn void end_drag_drop_target() @extern("igEndDragDropTarget");

extern fn void set_cursor_screen_pos(ImVec2 pos) @extern("igSetCursorScreenPos");

extern fn void save_ini_settings_to_disk(ZString ini_filename) @extern("igSaveIniSettingsToDisk");

extern fn void image(ImTextureID user_texture_id, ImVec2 image_size, ImVec2 uv0 = {0, 0}, ImVec2 uv1 = {1, 1}, ImVec4 tint_col = {1, 1, 1, 1}, ImVec4 border_col = {0, 0, 0, 0}) @extern("igImage");

extern fn void end_child() @extern("igEndChild");

extern fn bool is_window_hovered(ImGuiHoveredFlags flags = 0) @extern("igIsWindowHovered");

extern fn bool input_float(ZString label, float* v, float step = 0.0f, float step_fast = 0.0f, ZString format = "%.3f", ImGuiInputTextFlags flags = 0) @extern("igInputFloat");

extern fn bool begin_child_str(ZString str_id, ImVec2 size = {0, 0}, ImGuiChildFlags child_flags = 0, ImGuiWindowFlags window_flags = 0) @extern("igBeginChild_Str");

extern fn bool begin_child_id(ImGuiID id, ImVec2 size = {0, 0}, ImGuiChildFlags child_flags = 0, ImGuiWindowFlags window_flags = 0) @extern("igBeginChild_ID");

extern fn bool slider_int(ZString label, int* v, int v_min, int v_max, ZString format = "%d", ImGuiSliderFlags flags = 0) @extern("igSliderInt");

extern fn void render() @extern("igRender");

extern fn void text(ZString fmt, ...) @extern("igText");

extern fn bool v_slider_scalar(ZString label, ImVec2 size, ImGuiDataType data_type, void* p_data, void* p_min, void* p_max, ZString format = null, ImGuiSliderFlags flags = 0) @extern("igVSliderScalar");

extern fn void reset_mouse_drag_delta(ImGuiMouseButton button = 0) @extern("igResetMouseDragDelta");

extern fn bool is_mouse_released(ImGuiMouseButton button) @extern("igIsMouseReleased");

extern fn void style_colors_dark(ImGuiStyle* dst = null) @extern("igStyleColorsDark");

extern fn void set_next_item_width(float item_width) @extern("igSetNextItemWidth");

extern fn bool is_item_edited() @extern("igIsItemEdited");

extern fn void set_clipboard_text(ZString text) @extern("igSetClipboardText");

extern fn bool begin_menu(ZString label, bool enabled = true) @extern("igBeginMenu");

extern fn void close_current_popup() @extern("igCloseCurrentPopup");

extern fn void set_keyboard_focus_here(int offset = 0) @extern("igSetKeyboardFocusHere");

extern fn void push_style_color_u32(ImGuiCol idx, ImU32 col) @extern("igPushStyleColor_U32");

extern fn void push_style_color_vec4(ImGuiCol idx, ImVec4 col) @extern("igPushStyleColor_Vec4");

extern fn void set_next_window_scroll(ImVec2 scroll) @extern("igSetNextWindowScroll");

extern fn bool set_drag_drop_payload(ZString type, void* data, usz sz, ImGuiCond cond = 0) @extern("igSetDragDropPayload");

extern fn void pop_id() @extern("igPopID");

extern fn bool collapsing_header_tree_node_flags(ZString label, ImGuiTreeNodeFlags flags = 0) @extern("igCollapsingHeader_TreeNodeFlags");

extern fn bool collapsing_header_bool_ptr(ZString label, bool* p_visible, ImGuiTreeNodeFlags flags = 0) @extern("igCollapsingHeader_BoolPtr");

extern fn void end_popup() @extern("igEndPopup");

extern fn void debug_log(ZString fmt, ...) @extern("igDebugLog");

extern fn bool text_link(ZString label) @extern("igTextLink");

extern fn bool drag_int(ZString label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, ZString format = "%d", ImGuiSliderFlags flags = 0) @extern("igDragInt");

extern fn void next_column() @extern("igNextColumn");

extern fn bool v_slider_int(ZString label, ImVec2 size, int* v, int v_min, int v_max, ZString format = "%d", ImGuiSliderFlags flags = 0) @extern("igVSliderInt");

extern fn void push_clip_rect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect) @extern("igPushClipRect");

extern fn void log_to_tty(int auto_open_depth = -1) @extern("igLogToTTY");

extern fn bool begin_tooltip() @extern("igBeginTooltip");

extern fn void new_frame() @extern("igNewFrame");

extern fn bool combo_str_arr(ZString label, int* current_item, ZString[] items, int items_count, int popup_max_height_in_items = -1) @extern("igCombo_Str_arr");

extern fn bool combo_str(ZString label, int* current_item, ZString items_separated_by_zeros, int popup_max_height_in_items = -1) @extern("igCombo_Str");

extern fn bool combo_fn_str_ptr(ZString label, int* current_item, Combo_Getter_Func getter, void* user_data, int items_count, int popup_max_height_in_items = -1) @extern("igCombo_FnStrPtr");
def Combo_Getter_Func = fn ZString(void* user_data, int idx);

extern fn void table_headers_row() @extern("igTableHeadersRow");

extern fn float get_window_height() @extern("igGetWindowHeight");

extern fn void show_user_guide() @extern("igShowUserGuide");

extern fn void set_item_default_focus() @extern("igSetItemDefaultFocus");

extern fn void pop_item_flag() @extern("igPopItemFlag");

extern fn void indent(float indent_w = 0.0f) @extern("igIndent");

extern fn bool is_item_visible() @extern("igIsItemVisible");

extern fn void* create_context(ImFontAtlas* shared_font_atlas = null) @extern("igCreateContext");

extern fn void end_tooltip() @extern("igEndTooltip");

extern fn ZString get_clipboard_text() @extern("igGetClipboardText");

extern fn int table_get_row_index() @extern("igTableGetRowIndex");

extern fn void separator_text(ZString label) @extern("igSeparatorText");

extern fn void set_next_item_shortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags = 0) @extern("igSetNextItemShortcut");

extern fn void im_gui_free_type_set_allocator_functions(SetAllocatorFunctions_AllocFunc_Func alloc_func, SetAllocatorFunctions_FreeFunc_Func free_func, void* user_data = null) @extern("ImGuiFreeType_SetAllocatorFunctions");
def SetAllocatorFunctions_AllocFunc_Func = fn void*(usz sz, void* user_data);
def SetAllocatorFunctions_FreeFunc_Func = fn void(void* ptr, void* user_data);

extern fn void progress_bar(float fraction, ImVec2 size_arg = {-FLT_MIN, 0}, ZString overlay = null) @extern("igProgressBar");

extern fn void pop_style_color(int count = 1) @extern("igPopStyleColor");

extern fn void columns(int count = 1, ZString id = null, bool borders = true) @extern("igColumns");

extern fn void tree_pop() @extern("igTreePop");

extern fn int get_frame_count() @extern("igGetFrameCount");

extern fn void align_text_to_frame_padding() @extern("igAlignTextToFramePadding");

extern fn void get_allocator_functions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, void** p_user_data) @extern("igGetAllocatorFunctions");

extern fn void log_to_clipboard(int auto_open_depth = -1) @extern("igLogToClipboard");

extern fn bool is_item_activated() @extern("igIsItemActivated");

extern fn void end_drag_drop_source() @extern("igEndDragDropSource");

extern fn bool begin_popup_context_void(ZString str_id = null, ImGuiPopupFlags popup_flags = 1) @extern("igBeginPopupContextVoid");

extern fn bool color_button(ZString desc_id, ImVec4 col, ImGuiColorEditFlags flags = 0, ImVec2 size = {0, 0}) @extern("igColorButton");

extern fn void plot_histogram_float_ptr(ZString label, float* values, int values_count, int values_offset = 0, ZString overlay_text = null, float scale_min = float.max, float scale_max = float.max, ImVec2 graph_size = {0, 0}, int stride = float.sizeof) @extern("igPlotHistogram_FloatPtr");

extern fn void plot_histogram_fn_float_ptr(ZString label, PlotHistogram_ValuesGetter_Func values_getter, void* data, int values_count, int values_offset = 0, ZString overlay_text = null, float scale_min = float.max, float scale_max = float.max, ImVec2 graph_size = {0, 0}) @extern("igPlotHistogram_FnFloatPtr");
def PlotHistogram_ValuesGetter_Func = fn float(void* data, int idx);

extern fn bool is_window_collapsed() @extern("igIsWindowCollapsed");

extern fn void debug_flash_style_color(ImGuiCol idx) @extern("igDebugFlashStyleColor");

extern fn bool table_next_column() @extern("igTableNextColumn");

extern fn void set_column_width(int column_index, float width) @extern("igSetColumnWidth");

extern fn void label_text(ZString label, ZString fmt, ...) @extern("igLabelText");

extern fn float calc_item_width() @extern("igCalcItemWidth");

extern fn bool is_item_clicked(ImGuiMouseButton mouse_button = 0) @extern("igIsItemClicked");

extern fn void table_next_row(ImGuiTableRowFlags row_flags = 0, float min_row_height = 0.0f) @extern("igTableNextRow");

extern fn ImGuiPlatformIO* get_platform_io() @extern("igGetPlatformIO");

extern fn bool slider_angle(ZString label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, ZString format = "%.0f deg", ImGuiSliderFlags flags = 0) @extern("igSliderAngle");

extern fn void log_finish() @extern("igLogFinish");

extern fn bool input_scalar(ZString label, ImGuiDataType data_type, void* p_data, void* p_step = null, void* p_step_fast = null, ZString format = null, ImGuiInputTextFlags flags = 0) @extern("igInputScalar");

extern fn void color_convert_rg_bto_hsv(float r, float g, float b, float* out_h, float* out_s, float* out_v) @extern("igColorConvertRGBtoHSV");

extern fn bool small_button(ZString label) @extern("igSmallButton");

extern fn void table_set_column_enabled(int column_n, bool v) @extern("igTableSetColumnEnabled");

extern fn int table_get_column_count() @extern("igTableGetColumnCount");

extern fn bool v_slider_float(ZString label, ImVec2 size, float* v, float v_min, float v_max, ZString format = "%.3f", ImGuiSliderFlags flags = 0) @extern("igVSliderFloat");

extern fn void pop_clip_rect() @extern("igPopClipRect");

extern fn bool begin_popup_modal(ZString name, bool* p_open = null, ImGuiWindowFlags flags = 0) @extern("igBeginPopupModal");

extern fn ImGuiPayload* get_drag_drop_payload() @extern("igGetDragDropPayload");

extern fn void text_disabled(ZString fmt, ...) @extern("igTextDisabled");

extern fn ImGuiMouseCursor get_mouse_cursor() @extern("igGetMouseCursor");

extern fn ImGuiTableColumnFlags table_get_column_flags(int column_n = -1) @extern("igTableGetColumnFlags");

extern fn void same_line(float offset_from_start_x = 0.0f, float spacing = -1.0f) @extern("igSameLine");

extern fn bool is_mouse_hovering_rect(ImVec2 r_min, ImVec2 r_max, bool clip = true) @extern("igIsMouseHoveringRect");

extern fn void set_current_context(void* ctx) @extern("igSetCurrentContext");

extern fn void push_font(ImFont* font) @extern("igPushFont");

extern fn void set_next_window_content_size(ImVec2 size) @extern("igSetNextWindowContentSize");

extern fn void pop_style_var(int count = 1) @extern("igPopStyleVar");

extern fn void new_line() @extern("igNewLine");

extern fn bool debug_check_version_and_data_layout(ZString version_str, usz sz_io, usz sz_style, usz sz_vec2, usz sz_vec4, usz sz_drawvert, usz sz_drawidx) @extern("igDebugCheckVersionAndDataLayout");

extern fn ImU32 color_convert_float4_to_u32(ImVec4 in) @extern("igColorConvertFloat4ToU32");

extern fn bool menu_item_bool(ZString label, ZString shortcut = null, bool selected = false, bool enabled = true) @extern("igMenuItem_Bool");

extern fn bool menu_item_bool_ptr(ZString label, ZString shortcut, bool* p_selected, bool enabled = true) @extern("igMenuItem_BoolPtr");

extern fn void set_window_font_scale(float scale) @extern("igSetWindowFontScale");

extern fn void pop_text_wrap_pos() @extern("igPopTextWrapPos");

extern fn void set_next_item_open(bool is_open, ImGuiCond cond = 0) @extern("igSetNextItemOpen");

extern fn int get_column_index() @extern("igGetColumnIndex");

extern fn void bullet() @extern("igBullet");

extern fn void set_next_window_bg_alpha(float alpha) @extern("igSetNextWindowBgAlpha");

extern fn ImColor* new_im_color() @extern("ImColor_ImColor_Nil");

extern fn ImColor* new_im_color_float(float r, float g, float b, float a = 1.0f) @extern("ImColor_ImColor_Float");

extern fn ImColor* new_im_color_vec4(ImVec4 col) @extern("ImColor_ImColor_Vec4");

extern fn ImColor* new_im_color_int(int r, int g, int b, int a = 255) @extern("ImColor_ImColor_Int");

extern fn ImColor* new_im_color_u32(ImU32 rgba) @extern("ImColor_ImColor_U32");

extern fn void ImColor.set_hsv(ImColor* self, float h, float s, float v, float a = 1.0f) @extern("ImColor_SetHSV");

extern fn void ImColor.destroy(ImColor* self) @extern("ImColor_destroy");

extern fn ImTextureID ImDrawCmd.get_tex_id(ImDrawCmd* self) @extern("ImDrawCmd_GetTexID");

extern fn ImDrawCmd* new_im_draw_cmd() @extern("ImDrawCmd_ImDrawCmd");

extern fn void ImDrawCmd.destroy(ImDrawCmd* self) @extern("ImDrawCmd_destroy");

extern fn void ImDrawData.add_draw_list(ImDrawData* self, ImDrawList* draw_list) @extern("ImDrawData_AddDrawList");

extern fn void ImDrawData.clear(ImDrawData* self) @extern("ImDrawData_Clear");

extern fn void ImDrawData.de_index_all_buffers(ImDrawData* self) @extern("ImDrawData_DeIndexAllBuffers");

extern fn ImDrawData* new_im_draw_data() @extern("ImDrawData_ImDrawData");

extern fn void ImDrawData.scale_clip_rects(ImDrawData* self, ImVec2 fb_scale) @extern("ImDrawData_ScaleClipRects");

extern fn void ImDrawData.destroy(ImDrawData* self) @extern("ImDrawData_destroy");

extern fn void ImDrawList.add_concave_poly_filled(ImDrawList* self, ImVec2* points, int num_points, ImU32 col) @extern("ImDrawList_AddConcavePolyFilled");

extern fn void ImDrawListSplitter.clear(ImDrawListSplitter* self) @extern("ImDrawListSplitter_Clear");

extern fn void ImDrawListSplitter.clear_free_memory(ImDrawListSplitter* self) @extern("ImDrawListSplitter_ClearFreeMemory");

extern fn ImDrawListSplitter* new_im_draw_list_splitter() @extern("ImDrawListSplitter_ImDrawListSplitter");

extern fn void ImDrawListSplitter.merge(ImDrawListSplitter* self, ImDrawList* draw_list) @extern("ImDrawListSplitter_Merge");

extern fn void ImDrawListSplitter.set_current_channel(ImDrawListSplitter* self, ImDrawList* draw_list, int channel_idx) @extern("ImDrawListSplitter_SetCurrentChannel");

extern fn void ImDrawListSplitter.split(ImDrawListSplitter* self, ImDrawList* draw_list, int count) @extern("ImDrawListSplitter_Split");

extern fn void ImDrawListSplitter.destroy(ImDrawListSplitter* self) @extern("ImDrawListSplitter_destroy");

extern fn void ImDrawList.add_bezier_cubic(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImU32 col, float thickness, int num_segments = 0) @extern("ImDrawList_AddBezierCubic");

extern fn void ImDrawList.add_bezier_quadratic(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImU32 col, float thickness, int num_segments = 0) @extern("ImDrawList_AddBezierQuadratic");

extern fn void ImDrawList.add_callback(ImDrawList* self, ImDrawCallback callback, void* userdata, usz userdata_size = 0) @extern("ImDrawList_AddCallback");

extern fn void ImDrawList.add_circle(ImDrawList* self, ImVec2 center, float radius, ImU32 col, int num_segments = 0, float thickness = 1.0f) @extern("ImDrawList_AddCircle");

extern fn void ImDrawList.add_circle_filled(ImDrawList* self, ImVec2 center, float radius, ImU32 col, int num_segments = 0) @extern("ImDrawList_AddCircleFilled");

extern fn void ImDrawList.add_convex_poly_filled(ImDrawList* self, ImVec2* points, int num_points, ImU32 col) @extern("ImDrawList_AddConvexPolyFilled");

extern fn void ImDrawList.add_draw_cmd(ImDrawList* self) @extern("ImDrawList_AddDrawCmd");

extern fn void ImDrawList.add_ellipse(ImDrawList* self, ImVec2 center, ImVec2 radius, ImU32 col, float rot = 0.0f, int num_segments = 0, float thickness = 1.0f) @extern("ImDrawList_AddEllipse");

extern fn void ImDrawList.add_ellipse_filled(ImDrawList* self, ImVec2 center, ImVec2 radius, ImU32 col, float rot = 0.0f, int num_segments = 0) @extern("ImDrawList_AddEllipseFilled");

extern fn void ImDrawList.add_image(ImDrawList* self, ImTextureID user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min = {0, 0}, ImVec2 uv_max = {1, 1}, ImU32 col = 4294967295) @extern("ImDrawList_AddImage");

extern fn void ImDrawList.add_image_quad(ImDrawList* self, ImTextureID user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1 = {0, 0}, ImVec2 uv2 = {1, 0}, ImVec2 uv3 = {1, 1}, ImVec2 uv4 = {0, 1}, ImU32 col = 4294967295) @extern("ImDrawList_AddImageQuad");

extern fn void ImDrawList.add_image_rounded(ImDrawList* self, ImTextureID user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, ImU32 col, float rounding, ImDrawFlags flags = 0) @extern("ImDrawList_AddImageRounded");

extern fn void ImDrawList.add_line(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImU32 col, float thickness = 1.0f) @extern("ImDrawList_AddLine");

extern fn void ImDrawList.add_ngon(ImDrawList* self, ImVec2 center, float radius, ImU32 col, int num_segments, float thickness = 1.0f) @extern("ImDrawList_AddNgon");

extern fn void ImDrawList.add_ngon_filled(ImDrawList* self, ImVec2 center, float radius, ImU32 col, int num_segments) @extern("ImDrawList_AddNgonFilled");

extern fn void ImDrawList.add_polyline(ImDrawList* self, ImVec2* points, int num_points, ImU32 col, ImDrawFlags flags, float thickness) @extern("ImDrawList_AddPolyline");

extern fn void ImDrawList.add_quad(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImU32 col, float thickness = 1.0f) @extern("ImDrawList_AddQuad");

extern fn void ImDrawList.add_quad_filled(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImU32 col) @extern("ImDrawList_AddQuadFilled");

extern fn void ImDrawList.add_rect(ImDrawList* self, ImVec2 p_min, ImVec2 p_max, ImU32 col, float rounding = 0.0f, ImDrawFlags flags = 0, float thickness = 1.0f) @extern("ImDrawList_AddRect");

extern fn void ImDrawList.add_rect_filled(ImDrawList* self, ImVec2 p_min, ImVec2 p_max, ImU32 col, float rounding = 0.0f, ImDrawFlags flags = 0) @extern("ImDrawList_AddRectFilled");

extern fn void ImDrawList.add_rect_filled_multi_color(ImDrawList* self, ImVec2 p_min, ImVec2 p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left) @extern("ImDrawList_AddRectFilledMultiColor");

extern fn void ImDrawList.add_text_vec2(ImDrawList* self, ImVec2 pos, ImU32 col, ZString text_begin, ZString text_end = null) @extern("ImDrawList_AddText_Vec2");

extern fn void ImDrawList.add_text_font_ptr(ImDrawList* self, ImFont* font, float font_size, ImVec2 pos, ImU32 col, ZString text_begin, ZString text_end = null, float wrap_width = 0.0f, ImVec4* cpu_fine_clip_rect = null) @extern("ImDrawList_AddText_FontPtr");

extern fn void ImDrawList.add_triangle(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImU32 col, float thickness = 1.0f) @extern("ImDrawList_AddTriangle");

extern fn void ImDrawList.add_triangle_filled(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImU32 col) @extern("ImDrawList_AddTriangleFilled");

extern fn void ImDrawList.channels_merge(ImDrawList* self) @extern("ImDrawList_ChannelsMerge");

extern fn void ImDrawList.channels_set_current(ImDrawList* self, int n) @extern("ImDrawList_ChannelsSetCurrent");

extern fn void ImDrawList.channels_split(ImDrawList* self, int count) @extern("ImDrawList_ChannelsSplit");

extern fn ImDrawList* ImDrawList.clone_output(ImDrawList* self) @extern("ImDrawList_CloneOutput");

extern fn ImDrawList* new_im_draw_list(void* shared_data) @extern("ImDrawList_ImDrawList");

extern fn void ImDrawList.path_arc_to(ImDrawList* self, ImVec2 center, float radius, float a_min, float a_max, int num_segments = 0) @extern("ImDrawList_PathArcTo");

extern fn void ImDrawList.path_arc_to_fast(ImDrawList* self, ImVec2 center, float radius, int a_min_of_12, int a_max_of_12) @extern("ImDrawList_PathArcToFast");

extern fn void ImDrawList.path_bezier_cubic_curve_to(ImDrawList* self, ImVec2 p2, ImVec2 p3, ImVec2 p4, int num_segments = 0) @extern("ImDrawList_PathBezierCubicCurveTo");

extern fn void ImDrawList.path_bezier_quadratic_curve_to(ImDrawList* self, ImVec2 p2, ImVec2 p3, int num_segments = 0) @extern("ImDrawList_PathBezierQuadraticCurveTo");

extern fn void ImDrawList.path_clear(ImDrawList* self) @extern("ImDrawList_PathClear");

extern fn void ImDrawList.path_elliptical_arc_to(ImDrawList* self, ImVec2 center, ImVec2 radius, float rot, float a_min, float a_max, int num_segments = 0) @extern("ImDrawList_PathEllipticalArcTo");

extern fn void ImDrawList.path_fill_concave(ImDrawList* self, ImU32 col) @extern("ImDrawList_PathFillConcave");

extern fn void ImDrawList.path_fill_convex(ImDrawList* self, ImU32 col) @extern("ImDrawList_PathFillConvex");

extern fn void ImDrawList.path_line_to(ImDrawList* self, ImVec2 pos) @extern("ImDrawList_PathLineTo");

extern fn void ImDrawList.path_line_to_merge_duplicate(ImDrawList* self, ImVec2 pos) @extern("ImDrawList_PathLineToMergeDuplicate");

extern fn void ImDrawList.path_rect(ImDrawList* self, ImVec2 rect_min, ImVec2 rect_max, float rounding = 0.0f, ImDrawFlags flags = 0) @extern("ImDrawList_PathRect");

extern fn void ImDrawList.path_stroke(ImDrawList* self, ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) @extern("ImDrawList_PathStroke");

extern fn void ImDrawList.pop_clip_rect(ImDrawList* self) @extern("ImDrawList_PopClipRect");

extern fn void ImDrawList.pop_texture_id(ImDrawList* self) @extern("ImDrawList_PopTextureID");

extern fn void ImDrawList.prim_quad_uv(ImDrawList* self, ImVec2 a, ImVec2 b, ImVec2 c, ImVec2 d, ImVec2 uv_a, ImVec2 uv_b, ImVec2 uv_c, ImVec2 uv_d, ImU32 col) @extern("ImDrawList_PrimQuadUV");

extern fn void ImDrawList.prim_rect(ImDrawList* self, ImVec2 a, ImVec2 b, ImU32 col) @extern("ImDrawList_PrimRect");

extern fn void ImDrawList.prim_rect_uv(ImDrawList* self, ImVec2 a, ImVec2 b, ImVec2 uv_a, ImVec2 uv_b, ImU32 col) @extern("ImDrawList_PrimRectUV");

extern fn void ImDrawList.prim_reserve(ImDrawList* self, int idx_count, int vtx_count) @extern("ImDrawList_PrimReserve");

extern fn void ImDrawList.prim_unreserve(ImDrawList* self, int idx_count, int vtx_count) @extern("ImDrawList_PrimUnreserve");

extern fn void ImDrawList.prim_vtx(ImDrawList* self, ImVec2 pos, ImVec2 uv, ImU32 col) @extern("ImDrawList_PrimVtx");

extern fn void ImDrawList.prim_write_idx(ImDrawList* self, ImDrawIdx idx) @extern("ImDrawList_PrimWriteIdx");

extern fn void ImDrawList.prim_write_vtx(ImDrawList* self, ImVec2 pos, ImVec2 uv, ImU32 col) @extern("ImDrawList_PrimWriteVtx");

extern fn void ImDrawList.push_clip_rect(ImDrawList* self, ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false) @extern("ImDrawList_PushClipRect");

extern fn void ImDrawList.push_clip_rect_full_screen(ImDrawList* self) @extern("ImDrawList_PushClipRectFullScreen");

extern fn void ImDrawList.push_texture_id(ImDrawList* self, ImTextureID texture_id) @extern("ImDrawList_PushTextureID");

extern fn int ImDrawList.calc_circle_auto_segment_count(ImDrawList* self, float radius) @extern("ImDrawList__CalcCircleAutoSegmentCount");

extern fn void ImDrawList.clear_free_memory(ImDrawList* self) @extern("ImDrawList__ClearFreeMemory");

extern fn void ImDrawList.on_changed_clip_rect(ImDrawList* self) @extern("ImDrawList__OnChangedClipRect");

extern fn void ImDrawList.on_changed_texture_id(ImDrawList* self) @extern("ImDrawList__OnChangedTextureID");

extern fn void ImDrawList.on_changed_vtx_offset(ImDrawList* self) @extern("ImDrawList__OnChangedVtxOffset");

extern fn void ImDrawList.path_arc_to_fast_ex(ImDrawList* self, ImVec2 center, float radius, int a_min_sample, int a_max_sample, int a_step) @extern("ImDrawList__PathArcToFastEx");

extern fn void ImDrawList.path_arc_to_n(ImDrawList* self, ImVec2 center, float radius, float a_min, float a_max, int num_segments) @extern("ImDrawList__PathArcToN");

extern fn void ImDrawList.pop_unused_draw_cmd(ImDrawList* self) @extern("ImDrawList__PopUnusedDrawCmd");

extern fn void ImDrawList.reset_for_new_frame(ImDrawList* self) @extern("ImDrawList__ResetForNewFrame");

extern fn void ImDrawList.set_texture_id(ImDrawList* self, ImTextureID texture_id) @extern("ImDrawList__SetTextureID");

extern fn void ImDrawList.try_merge_draw_cmds(ImDrawList* self) @extern("ImDrawList__TryMergeDrawCmds");

extern fn void ImDrawList.destroy(ImDrawList* self) @extern("ImDrawList_destroy");

extern fn ImFontAtlasCustomRect* new_im_font_atlas_custom_rect() @extern("ImFontAtlasCustomRect_ImFontAtlasCustomRect");

extern fn bool ImFontAtlasCustomRect.is_packed(ImFontAtlasCustomRect* self) @extern("ImFontAtlasCustomRect_IsPacked");

extern fn void ImFontAtlasCustomRect.destroy(ImFontAtlasCustomRect* self) @extern("ImFontAtlasCustomRect_destroy");

extern fn int ImFontAtlas.add_custom_rect_font_glyph(ImFontAtlas* self, ImFont* font, ImWchar id, int width, int height, float advance_x, ImVec2 offset = {0, 0}) @extern("ImFontAtlas_AddCustomRectFontGlyph");

extern fn int ImFontAtlas.add_custom_rect_regular(ImFontAtlas* self, int width, int height) @extern("ImFontAtlas_AddCustomRectRegular");

extern fn ImFont* ImFontAtlas.add_font(ImFontAtlas* self, ImFontConfig* font_cfg) @extern("ImFontAtlas_AddFont");

extern fn ImFont* ImFontAtlas.add_font_default(ImFontAtlas* self, ImFontConfig* font_cfg = null) @extern("ImFontAtlas_AddFontDefault");

extern fn ImFont* ImFontAtlas.add_font_from_file_ttf(ImFontAtlas* self, ZString filename, float size_pixels, ImFontConfig* font_cfg = null, ImWchar* glyph_ranges = null) @extern("ImFontAtlas_AddFontFromFileTTF");

extern fn void ImGuiPayload.destroy(ImGuiPayload* self) @extern("ImGuiPayload_destroy");

extern fn ImFont* ImFontAtlas.add_font_from_memory_compressed_base85_ttf(ImFontAtlas* self, ZString compressed_font_data_base85, float size_pixels, ImFontConfig* font_cfg = null, ImWchar* glyph_ranges = null) @extern("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF");

extern fn ImFont* ImFontAtlas.add_font_from_memory_compressed_ttf(ImFontAtlas* self, void* compressed_font_data, int compressed_font_data_size, float size_pixels, ImFontConfig* font_cfg = null, ImWchar* glyph_ranges = null) @extern("ImFontAtlas_AddFontFromMemoryCompressedTTF");

extern fn ImFont* ImFontAtlas.add_font_from_memory_ttf(ImFontAtlas* self, void* font_data, int font_data_size, float size_pixels, ImFontConfig* font_cfg = null, ImWchar* glyph_ranges = null) @extern("ImFontAtlas_AddFontFromMemoryTTF");

extern fn bool ImFontAtlas.build(ImFontAtlas* self) @extern("ImFontAtlas_Build");

extern fn void ImFontAtlas.calc_custom_rect_uv(ImFontAtlas* self, ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max) @extern("ImFontAtlas_CalcCustomRectUV");

extern fn void ImFontAtlas.clear(ImFontAtlas* self) @extern("ImFontAtlas_Clear");

extern fn void ImFontAtlas.clear_fonts(ImFontAtlas* self) @extern("ImFontAtlas_ClearFonts");

extern fn void ImFontAtlas.clear_input_data(ImFontAtlas* self) @extern("ImFontAtlas_ClearInputData");

extern fn void ImFontAtlas.clear_tex_data(ImFontAtlas* self) @extern("ImFontAtlas_ClearTexData");

extern fn ImFontAtlasCustomRect* ImFontAtlas.get_custom_rect_by_index(ImFontAtlas* self, int index) @extern("ImFontAtlas_GetCustomRectByIndex");

extern fn ImWchar* ImFontAtlas.get_glyph_ranges_chinese_full(ImFontAtlas* self) @extern("ImFontAtlas_GetGlyphRangesChineseFull");

extern fn ImWchar* ImFontAtlas.get_glyph_ranges_chinese_simplified_common(ImFontAtlas* self) @extern("ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon");

extern fn ImWchar* ImFontAtlas.get_glyph_ranges_cyrillic(ImFontAtlas* self) @extern("ImFontAtlas_GetGlyphRangesCyrillic");

extern fn ImWchar* ImFontAtlas.get_glyph_ranges_default(ImFontAtlas* self) @extern("ImFontAtlas_GetGlyphRangesDefault");

extern fn ImWchar* ImFontAtlas.get_glyph_ranges_greek(ImFontAtlas* self) @extern("ImFontAtlas_GetGlyphRangesGreek");

extern fn ImWchar* ImFontAtlas.get_glyph_ranges_japanese(ImFontAtlas* self) @extern("ImFontAtlas_GetGlyphRangesJapanese");

extern fn ImWchar* ImFontAtlas.get_glyph_ranges_korean(ImFontAtlas* self) @extern("ImFontAtlas_GetGlyphRangesKorean");

extern fn ImWchar* ImFontAtlas.get_glyph_ranges_thai(ImFontAtlas* self) @extern("ImFontAtlas_GetGlyphRangesThai");

extern fn ImWchar* ImFontAtlas.get_glyph_ranges_vietnamese(ImFontAtlas* self) @extern("ImFontAtlas_GetGlyphRangesVietnamese");

extern fn bool ImFontAtlas.get_mouse_cursor_tex_data(ImFontAtlas* self, ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ImVec2[2] out_uv_border, ImVec2[2] out_uv_fill) @extern("ImFontAtlas_GetMouseCursorTexData");

extern fn void ImFontAtlas.get_tex_data_as_alpha8(ImFontAtlas* self, char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = null) @extern("ImFontAtlas_GetTexDataAsAlpha8");

extern fn void ImFontAtlas.get_tex_data_as_rgba32(ImFontAtlas* self, char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = null) @extern("ImFontAtlas_GetTexDataAsRGBA32");

extern fn ImFontAtlas* new_im_font_atlas() @extern("ImFontAtlas_ImFontAtlas");

extern fn bool ImFontAtlas.is_built(ImFontAtlas* self) @extern("ImFontAtlas_IsBuilt");

extern fn void ImFontAtlas.set_tex_id(ImFontAtlas* self, ImTextureID id) @extern("ImFontAtlas_SetTexID");

extern fn void ImFontAtlas.destroy(ImFontAtlas* self) @extern("ImFontAtlas_destroy");

extern fn ImFontConfig* new_im_font_config() @extern("ImFontConfig_ImFontConfig");

extern fn void ImFontConfig.destroy(ImFontConfig* self) @extern("ImFontConfig_destroy");

extern fn void ImFontGlyphRangesBuilder.add_char(ImFontGlyphRangesBuilder* self, ImWchar c) @extern("ImFontGlyphRangesBuilder_AddChar");

extern fn void ImFontGlyphRangesBuilder.add_ranges(ImFontGlyphRangesBuilder* self, ImWchar* ranges) @extern("ImFontGlyphRangesBuilder_AddRanges");

extern fn void ImFontGlyphRangesBuilder.add_text(ImFontGlyphRangesBuilder* self, ZString text, ZString text_end = null) @extern("ImFontGlyphRangesBuilder_AddText");

extern fn void ImFontGlyphRangesBuilder.build_ranges(ImFontGlyphRangesBuilder* self, vector::Vector(<ImWchar>)* out_ranges) @extern("ImFontGlyphRangesBuilder_BuildRanges");

extern fn void ImFontGlyphRangesBuilder.clear(ImFontGlyphRangesBuilder* self) @extern("ImFontGlyphRangesBuilder_Clear");

extern fn bool ImFontGlyphRangesBuilder.get_bit(ImFontGlyphRangesBuilder* self, usz n) @extern("ImFontGlyphRangesBuilder_GetBit");

extern fn ImFontGlyphRangesBuilder* new_im_font_glyph_ranges_builder() @extern("ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder");

extern fn void ImFontGlyphRangesBuilder.set_bit(ImFontGlyphRangesBuilder* self, usz n) @extern("ImFontGlyphRangesBuilder_SetBit");

extern fn void ImFontGlyphRangesBuilder.destroy(ImFontGlyphRangesBuilder* self) @extern("ImFontGlyphRangesBuilder_destroy");

extern fn void ImFont.add_glyph(ImFont* self, ImFontConfig* src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x) @extern("ImFont_AddGlyph");

extern fn void ImFont.add_remap_char(ImFont* self, ImWchar dst, ImWchar src, bool overwrite_dst = true) @extern("ImFont_AddRemapChar");

extern fn void ImFont.build_lookup_table(ImFont* self) @extern("ImFont_BuildLookupTable");

extern fn ZString ImFont.calc_word_wrap_position_a(ImFont* self, float scale, ZString text, ZString text_end, float wrap_width) @extern("ImFont_CalcWordWrapPositionA");

extern fn void ImFont.clear_output_data(ImFont* self) @extern("ImFont_ClearOutputData");

extern fn ImFontGlyph* ImFont.find_glyph(ImFont* self, ImWchar c) @extern("ImFont_FindGlyph");

extern fn ImFontGlyph* ImFont.find_glyph_no_fallback(ImFont* self, ImWchar c) @extern("ImFont_FindGlyphNoFallback");

extern fn float ImFont.get_char_advance(ImFont* self, ImWchar c) @extern("ImFont_GetCharAdvance");

extern fn ZString ImFont.get_debug_name(ImFont* self) @extern("ImFont_GetDebugName");

extern fn void ImFont.grow_index(ImFont* self, int new_size) @extern("ImFont_GrowIndex");

extern fn ImFont* new_im_font() @extern("ImFont_ImFont");

extern fn bool ImFont.is_glyph_range_unused(ImFont* self, uint c_begin, uint c_last) @extern("ImFont_IsGlyphRangeUnused");

extern fn bool ImFont.is_loaded(ImFont* self) @extern("ImFont_IsLoaded");

extern fn void ImFont.render_char(ImFont* self, ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c) @extern("ImFont_RenderChar");

extern fn void ImFont.render_text(ImFont* self, ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImVec4 clip_rect, ZString text_begin, ZString text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) @extern("ImFont_RenderText");

extern fn void ImFont.set_glyph_visible(ImFont* self, ImWchar c, bool visible) @extern("ImFont_SetGlyphVisible");

extern fn void ImFont.destroy(ImFont* self) @extern("ImFont_destroy");

extern fn void ImGuiIO.add_focus_event(ImGuiIO* self, bool focused) @extern("ImGuiIO_AddFocusEvent");

extern fn void ImGuiIO.add_input_character(ImGuiIO* self, uint c) @extern("ImGuiIO_AddInputCharacter");

extern fn void ImGuiIO.add_input_character_utf16(ImGuiIO* self, ImWchar16 c) @extern("ImGuiIO_AddInputCharacterUTF16");

extern fn void ImGuiIO.add_input_characters_utf8(ImGuiIO* self, ZString str) @extern("ImGuiIO_AddInputCharactersUTF8");

extern fn void ImGuiIO.add_key_analog_event(ImGuiIO* self, ImGuiKey key, bool down, float v) @extern("ImGuiIO_AddKeyAnalogEvent");

extern fn void ImGuiIO.add_key_event(ImGuiIO* self, ImGuiKey key, bool down) @extern("ImGuiIO_AddKeyEvent");

extern fn void ImGuiIO.add_mouse_button_event(ImGuiIO* self, int button, bool down) @extern("ImGuiIO_AddMouseButtonEvent");

extern fn void ImGuiIO.add_mouse_pos_event(ImGuiIO* self, float x, float y) @extern("ImGuiIO_AddMousePosEvent");

extern fn void ImGuiIO.add_mouse_source_event(ImGuiIO* self, ImGuiMouseSource source) @extern("ImGuiIO_AddMouseSourceEvent");

extern fn void ImGuiIO.add_mouse_wheel_event(ImGuiIO* self, float wheel_x, float wheel_y) @extern("ImGuiIO_AddMouseWheelEvent");

extern fn void ImGuiIO.clear_events_queue(ImGuiIO* self) @extern("ImGuiIO_ClearEventsQueue");

extern fn void ImGuiIO.clear_input_keys(ImGuiIO* self) @extern("ImGuiIO_ClearInputKeys");

extern fn void ImGuiIO.clear_input_mouse(ImGuiIO* self) @extern("ImGuiIO_ClearInputMouse");

extern fn ImGuiIO* new_im_gui_io() @extern("ImGuiIO_ImGuiIO");

extern fn void ImGuiIO.set_app_accepting_events(ImGuiIO* self, bool accepting_events) @extern("ImGuiIO_SetAppAcceptingEvents");

extern fn void ImGuiIO.set_key_event_native_data(ImGuiIO* self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index = -1) @extern("ImGuiIO_SetKeyEventNativeData");

extern fn void ImGuiIO.destroy(ImGuiIO* self) @extern("ImGuiIO_destroy");

extern fn void ImGuiInputTextCallbackData.clear_selection(ImGuiInputTextCallbackData* self) @extern("ImGuiInputTextCallbackData_ClearSelection");

extern fn void ImGuiInputTextCallbackData.delete_chars(ImGuiInputTextCallbackData* self, int pos, int bytes_count) @extern("ImGuiInputTextCallbackData_DeleteChars");

extern fn bool ImGuiInputTextCallbackData.has_selection(ImGuiInputTextCallbackData* self) @extern("ImGuiInputTextCallbackData_HasSelection");

extern fn ImGuiInputTextCallbackData* new_im_gui_input_text_callback_data() @extern("ImGuiInputTextCallbackData_ImGuiInputTextCallbackData");

extern fn void ImGuiInputTextCallbackData.insert_chars(ImGuiInputTextCallbackData* self, int pos, ZString text, ZString text_end = null) @extern("ImGuiInputTextCallbackData_InsertChars");

extern fn void ImGuiInputTextCallbackData.select_all(ImGuiInputTextCallbackData* self) @extern("ImGuiInputTextCallbackData_SelectAll");

extern fn void ImGuiInputTextCallbackData.destroy(ImGuiInputTextCallbackData* self) @extern("ImGuiInputTextCallbackData_destroy");

extern fn void ImGuiListClipper.begin(ImGuiListClipper* self, int items_count, float items_height = -1.0f) @extern("ImGuiListClipper_Begin");

extern fn void ImGuiListClipper.end(ImGuiListClipper* self) @extern("ImGuiListClipper_End");

extern fn ImGuiListClipper* new_im_gui_list_clipper() @extern("ImGuiListClipper_ImGuiListClipper");

extern fn void ImGuiListClipper.include_item_by_index(ImGuiListClipper* self, int item_index) @extern("ImGuiListClipper_IncludeItemByIndex");

extern fn void ImGuiListClipper.include_items_by_index(ImGuiListClipper* self, int item_begin, int item_end) @extern("ImGuiListClipper_IncludeItemsByIndex");

extern fn void ImGuiListClipper.seek_cursor_for_item(ImGuiListClipper* self, int item_index) @extern("ImGuiListClipper_SeekCursorForItem");

extern fn bool ImGuiListClipper.step(ImGuiListClipper* self) @extern("ImGuiListClipper_Step");

extern fn void ImGuiListClipper.destroy(ImGuiListClipper* self) @extern("ImGuiListClipper_destroy");

extern fn ImGuiOnceUponAFrame* new_im_gui_once_upon_a_frame() @extern("ImGuiOnceUponAFrame_ImGuiOnceUponAFrame");

extern fn void ImGuiOnceUponAFrame.destroy(ImGuiOnceUponAFrame* self) @extern("ImGuiOnceUponAFrame_destroy");

extern fn void ImGuiPayload.clear(ImGuiPayload* self) @extern("ImGuiPayload_Clear");

extern fn ImGuiPayload* new_im_gui_payload() @extern("ImGuiPayload_ImGuiPayload");

extern fn bool ImGuiPayload.is_data_type(ImGuiPayload* self, ZString type) @extern("ImGuiPayload_IsDataType");

extern fn bool ImGuiPayload.is_delivery(ImGuiPayload* self) @extern("ImGuiPayload_IsDelivery");

extern fn bool ImGuiPayload.is_preview(ImGuiPayload* self) @extern("ImGuiPayload_IsPreview");

extern fn ImGuiPlatformIO* new_im_gui_platform_io() @extern("ImGuiPlatformIO_ImGuiPlatformIO");

extern fn void ImGuiPlatformIO.destroy(ImGuiPlatformIO* self) @extern("ImGuiPlatformIO_destroy");

extern fn ImGuiPlatformImeData* new_im_gui_platform_ime_data() @extern("ImGuiPlatformImeData_ImGuiPlatformImeData");

extern fn void ImGuiPlatformImeData.destroy(ImGuiPlatformImeData* self) @extern("ImGuiPlatformImeData_destroy");

extern fn void ImGuiSelectionBasicStorage.apply_requests(ImGuiSelectionBasicStorage* self, ImGuiMultiSelectIO* ms_io) @extern("ImGuiSelectionBasicStorage_ApplyRequests");

extern fn void ImGuiSelectionBasicStorage.clear(ImGuiSelectionBasicStorage* self) @extern("ImGuiSelectionBasicStorage_Clear");

extern fn bool ImGuiSelectionBasicStorage.contains(ImGuiSelectionBasicStorage* self, ImGuiID id) @extern("ImGuiSelectionBasicStorage_Contains");

extern fn bool ImGuiSelectionBasicStorage.get_next_selected_item(ImGuiSelectionBasicStorage* self, void** opaque_it, ImGuiID* out_id) @extern("ImGuiSelectionBasicStorage_GetNextSelectedItem");

extern fn ImGuiID ImGuiSelectionBasicStorage.get_storage_id_from_index(ImGuiSelectionBasicStorage* self, int idx) @extern("ImGuiSelectionBasicStorage_GetStorageIdFromIndex");

extern fn ImGuiSelectionBasicStorage* new_im_gui_selection_basic_storage() @extern("ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage");

extern fn void ImGuiSelectionBasicStorage.set_item_selected(ImGuiSelectionBasicStorage* self, ImGuiID id, bool selected) @extern("ImGuiSelectionBasicStorage_SetItemSelected");

extern fn void ImGuiSelectionBasicStorage.swap(ImGuiSelectionBasicStorage* self, ImGuiSelectionBasicStorage* r) @extern("ImGuiSelectionBasicStorage_Swap");

extern fn void ImGuiSelectionBasicStorage.destroy(ImGuiSelectionBasicStorage* self) @extern("ImGuiSelectionBasicStorage_destroy");

extern fn void ImGuiSelectionExternalStorage.apply_requests(ImGuiSelectionExternalStorage* self, ImGuiMultiSelectIO* ms_io) @extern("ImGuiSelectionExternalStorage_ApplyRequests");

extern fn ImGuiSelectionExternalStorage* new_im_gui_selection_external_storage() @extern("ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage");

extern fn void ImGuiSelectionExternalStorage.destroy(ImGuiSelectionExternalStorage* self) @extern("ImGuiSelectionExternalStorage_destroy");

extern fn ImGuiStoragePair* new_im_gui_storage_pair_int(ImGuiID _key, int _val) @extern("ImGuiStoragePair_ImGuiStoragePair_Int");

extern fn ImGuiStoragePair* new_im_gui_storage_pair_float(ImGuiID _key, float _val) @extern("ImGuiStoragePair_ImGuiStoragePair_Float");

extern fn ImGuiStoragePair* new_im_gui_storage_pair_ptr(ImGuiID _key, void* _val) @extern("ImGuiStoragePair_ImGuiStoragePair_Ptr");

extern fn void ImGuiStoragePair.destroy(ImGuiStoragePair* self) @extern("ImGuiStoragePair_destroy");

extern fn void ImGuiStorage.build_sort_by_key(ImGuiStorage* self) @extern("ImGuiStorage_BuildSortByKey");

extern fn void ImGuiStorage.clear(ImGuiStorage* self) @extern("ImGuiStorage_Clear");

extern fn bool ImGuiStorage.get_bool(ImGuiStorage* self, ImGuiID key, bool default_val = false) @extern("ImGuiStorage_GetBool");

extern fn bool* ImGuiStorage.get_bool_ref(ImGuiStorage* self, ImGuiID key, bool default_val = false) @extern("ImGuiStorage_GetBoolRef");

extern fn float ImGuiStorage.get_float(ImGuiStorage* self, ImGuiID key, float default_val = 0.0f) @extern("ImGuiStorage_GetFloat");

extern fn float* ImGuiStorage.get_float_ref(ImGuiStorage* self, ImGuiID key, float default_val = 0.0f) @extern("ImGuiStorage_GetFloatRef");

extern fn int ImGuiStorage.get_int(ImGuiStorage* self, ImGuiID key, int default_val = 0) @extern("ImGuiStorage_GetInt");

extern fn int* ImGuiStorage.get_int_ref(ImGuiStorage* self, ImGuiID key, int default_val = 0) @extern("ImGuiStorage_GetIntRef");

extern fn void* ImGuiStorage.get_void_ptr(ImGuiStorage* self, ImGuiID key) @extern("ImGuiStorage_GetVoidPtr");

extern fn void** ImGuiStorage.get_void_ptr_ref(ImGuiStorage* self, ImGuiID key, void* default_val = null) @extern("ImGuiStorage_GetVoidPtrRef");

extern fn void ImGuiStorage.set_all_int(ImGuiStorage* self, int val) @extern("ImGuiStorage_SetAllInt");

extern fn void ImGuiStorage.set_bool(ImGuiStorage* self, ImGuiID key, bool val) @extern("ImGuiStorage_SetBool");

extern fn void ImGuiStorage.set_float(ImGuiStorage* self, ImGuiID key, float val) @extern("ImGuiStorage_SetFloat");

extern fn void ImGuiStorage.set_int(ImGuiStorage* self, ImGuiID key, int val) @extern("ImGuiStorage_SetInt");

extern fn void ImGuiStorage.set_void_ptr(ImGuiStorage* self, ImGuiID key, void* val) @extern("ImGuiStorage_SetVoidPtr");

extern fn ImGuiStyle* new_im_gui_style() @extern("ImGuiStyle_ImGuiStyle");

extern fn void ImGuiStyle.scale_all_sizes(ImGuiStyle* self, float scale_factor) @extern("ImGuiStyle_ScaleAllSizes");

extern fn void ImGuiStyle.destroy(ImGuiStyle* self) @extern("ImGuiStyle_destroy");

extern fn ImGuiTableColumnSortSpecs* new_im_gui_table_column_sort_specs() @extern("ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs");

extern fn void ImGuiTableColumnSortSpecs.destroy(ImGuiTableColumnSortSpecs* self) @extern("ImGuiTableColumnSortSpecs_destroy");

extern fn ImGuiTableSortSpecs* new_im_gui_table_sort_specs() @extern("ImGuiTableSortSpecs_ImGuiTableSortSpecs");

extern fn void ImGuiTableSortSpecs.destroy(ImGuiTableSortSpecs* self) @extern("ImGuiTableSortSpecs_destroy");

extern fn ImGuiTextBuffer* new_im_gui_text_buffer() @extern("ImGuiTextBuffer_ImGuiTextBuffer");

extern fn void ImGuiTextBuffer.append(ImGuiTextBuffer* self, ZString str, ZString str_end = null) @extern("ImGuiTextBuffer_append");

extern fn void ImGuiTextBuffer.appendf(ImGuiTextBuffer* buffer, ZString fmt, ...) @extern("ImGuiTextBuffer_appendf");

extern fn ZString ImGuiTextBuffer.begin(ImGuiTextBuffer* self) @extern("ImGuiTextBuffer_begin");

extern fn ZString ImGuiTextBuffer.c_str(ImGuiTextBuffer* self) @extern("ImGuiTextBuffer_c_str");

extern fn void ImGuiTextBuffer.clear(ImGuiTextBuffer* self) @extern("ImGuiTextBuffer_clear");

extern fn void ImGuiTextBuffer.destroy(ImGuiTextBuffer* self) @extern("ImGuiTextBuffer_destroy");

extern fn bool ImGuiTextBuffer.empty(ImGuiTextBuffer* self) @extern("ImGuiTextBuffer_empty");

extern fn ZString ImGuiTextBuffer.end(ImGuiTextBuffer* self) @extern("ImGuiTextBuffer_end");

extern fn void ImGuiTextBuffer.reserve(ImGuiTextBuffer* self, int capacity) @extern("ImGuiTextBuffer_reserve");

extern fn int ImGuiTextBuffer.size(ImGuiTextBuffer* self) @extern("ImGuiTextBuffer_size");

extern fn void ImGuiTextFilter.build(ImGuiTextFilter* self) @extern("ImGuiTextFilter_Build");

extern fn void ImGuiTextFilter.clear(ImGuiTextFilter* self) @extern("ImGuiTextFilter_Clear");

extern fn bool ImGuiTextFilter.draw(ImGuiTextFilter* self, ZString label = "Filter(inc,-exc)", float width = 0.0f) @extern("ImGuiTextFilter_Draw");

extern fn ImGuiTextFilter* new_im_gui_text_filter(ZString default_filter = "") @extern("ImGuiTextFilter_ImGuiTextFilter");

extern fn bool ImGuiTextFilter.is_active(ImGuiTextFilter* self) @extern("ImGuiTextFilter_IsActive");

extern fn bool ImGuiTextFilter.pass_filter(ImGuiTextFilter* self, ZString text, ZString text_end = null) @extern("ImGuiTextFilter_PassFilter");

extern fn void ImGuiTextFilter.destroy(ImGuiTextFilter* self) @extern("ImGuiTextFilter_destroy");

extern fn ImGuiTextRange* new_im_gui_text_range() @extern("ImGuiTextRange_ImGuiTextRange_Nil");

extern fn ImGuiTextRange* new_im_gui_text_range_str(ZString _b, ZString _e) @extern("ImGuiTextRange_ImGuiTextRange_Str");

extern fn void ImGuiTextRange.destroy(ImGuiTextRange* self) @extern("ImGuiTextRange_destroy");

extern fn bool ImGuiTextRange.empty(ImGuiTextRange* self) @extern("ImGuiTextRange_empty");

extern fn void ImGuiTextRange.split(ImGuiTextRange* self, char separator, vector::Vector(<ImGuiTextRange>)* out) @extern("ImGuiTextRange_split");

extern fn ImGuiViewport* new_im_gui_viewport() @extern("ImGuiViewport_ImGuiViewport");

extern fn void ImGuiViewport.destroy(ImGuiViewport* self) @extern("ImGuiViewport_destroy");

extern fn ImVec2* new_im_vec2() @extern("ImVec2_ImVec2_Nil");

extern fn ImVec2* new_im_vec2_float(float _x, float _y) @extern("ImVec2_ImVec2_Float");

extern fn void ImVec2.destroy(ImVec2* self) @extern("ImVec2_destroy");

extern fn ImVec4* new_im_vec4() @extern("ImVec4_ImVec4_Nil");

extern fn ImVec4* new_im_vec4_float(float _x, float _y, float _z, float _w) @extern("ImVec4_ImVec4_Float");

extern fn void ImVec4.destroy(ImVec4* self) @extern("ImVec4_destroy");

